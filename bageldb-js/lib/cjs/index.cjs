(()=>{"use strict";var e={454:(e,t,n)=>{n.d(t,{CH:()=>a,ej:()=>c,NR:()=>l,od:()=>i(),Zb:()=>f,$R:()=>b});const r=require("axios");var i=n.n(r),o=n(752);const a=function(){function e(e){var t=e.instance,n=e.collectionID;Object.defineProperty(this,"instance",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"collectionID",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_pageNumber",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"itemsPerPage",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"callEverything",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_query",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"nestedCollectionsIDs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"axiosInstance",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"apiToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_projectOn",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_projectOff",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"requestID",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"client",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_item",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_field",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"sortField",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"sortOrder",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.instance=t,this.collectionID=n,this._pageNumber=1,this.itemsPerPage=100,this.callEverything=!1,this._query=[],this.nestedCollectionsIDs=[],this.axiosInstance=i().create(),this.apiToken=t.apiToken,this._projectOn="",this._projectOff="",this.requestID="",this.sortField="",this.sortOrder="",this._item,this._field}return Object.defineProperty(e.prototype,"pageNumber",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return this._pageNumber=e,this}}),Object.defineProperty(e.prototype,"perPage",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return this.itemsPerPage=+e,this}}),Object.defineProperty(e.prototype,"everything",{enumerable:!1,configurable:!0,writable:!0,value:function(){return this.callEverything=!0,this}}),Object.defineProperty(e.prototype,"collection",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return this.nestedCollectionsIDs.push(e),this}}),Object.defineProperty(e.prototype,"item",{enumerable:!1,configurable:!0,writable:!0,value:function(e){if(!e)throw"item cant be "+e;if(this._item){if(this.nestedCollectionsIDs.length%2==0)throw"a nested item can only be placed after a nested collection";this.nestedCollectionsIDs.push(e)}else this._item=e;return this}}),Object.defineProperty(e.prototype,"query",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t,n){if(!e)return this;Array.isArray(n)&&(n=n.join(","));var r=e+":"+t+":"+n;return this._query.push(encodeURIComponent(r)),this}}),Object.defineProperty(e.prototype,"sort",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){return this.sortField=e,this.sortOrder=t||"",this}}),Object.defineProperty(e.prototype,"projectOn",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return this._projectOn=e,this}}),Object.defineProperty(e.prototype,"projectOff",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return this._projectOff=e,this}}),Object.defineProperty(e.prototype,"uploadImage",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){var r,i=this,o=t.selectedImage,a=t.imageLink,c=t.altText,s=t.fileName,u=new Function("try {return this===global;}catch(e){return false;}");if(u()){var l=n(941);r=new l}else r=new FormData;var b,h=this.nestedCollectionsIDs.join(".");return c&&r.append("altText",c),a?r.append("imageLink",a):r.append("imageFile",o,s),u()&&(b=r.getHeaders()),new Promise((function(t,n){var o="".concat(f,"/collection/").concat(i.collectionID,"/items/").concat(i._item,"/image?imageSlug=").concat(e,"&nestedID=").concat(h);i.instance.axiosInstance.put(o,r,{headers:b}).then((function(e){t(e)})).catch((function(e){return n(e)}))}))}}),Object.defineProperty(e.prototype,"delete",{enumerable:!1,configurable:!0,writable:!0,value:function(){var e=this,t=this.nestedCollectionsIDs.join("."),n="".concat(f,"/collection/").concat(this.collectionID,"/items/").concat(this._item);return t&&(n+="?nestedID=".concat(t)),new Promise((function(t,r){e.instance.axiosInstance.delete(n).then((function(e){return t(e)})).catch((function(e){return r(e)}))}))}}),Object.defineProperty(e.prototype,"set",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=this,n=this.nestedCollectionsIDs.join("."),r="".concat(f,"/collection/").concat(this.collectionID,"/items/").concat(this._item,"?set=true");return n&&(r+="&nestedID=".concat(n)),new Promise((function(n,i){t.instance.axiosInstance.put(r,JSON.stringify(e)).then((function(e){return(0,o.__awaiter)(t,void 0,void 0,(function(){return(0,o.__generator)(this,(function(t){return n(e),[2]}))}))})).catch((function(e){return i(e)}))}))}}),Object.defineProperty(e.prototype,"put",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=this,n=this.nestedCollectionsIDs.join("."),r="".concat(f,"/collection/").concat(this.collectionID,"/items/").concat(this._item);return n&&(r+="?nestedID=".concat(n)),new Promise((function(n,i){t.instance.axiosInstance.put(r,JSON.stringify(e)).then((function(e){return(0,o.__awaiter)(t,void 0,void 0,(function(){return(0,o.__generator)(this,(function(t){return n(e),[2]}))}))})).catch((function(e){return i(e)}))}))}}),Object.defineProperty(e.prototype,"post",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=this,n=this.nestedCollectionsIDs.join(".");return new Promise((function(r,i){var o="".concat(f,"/collection/").concat(t.collectionID,"/items");n&&(o+="/".concat(t._item,"?nestedID=").concat(n)),t.instance.axiosInstance.post(o,e).then((function(e){r(e)})).catch((function(e){i(e)}))}))}}),Object.defineProperty(e.prototype,"append",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){var n=this,r=this.nestedCollectionsIDs.join(".");return new Promise((function(i,o){var a="".concat(f,"/collection/").concat(n.collectionID,"/items/").concat(n._item,"/field/").concat(e);r&&(a+="?nestedID=".concat(r)),n.instance.axiosInstance.put(a,{value:t}).then((function(e){i(e)})).catch((function(e){o(e)}))}))}}),Object.defineProperty(e.prototype,"field",{enumerable:!1,configurable:!0,writable:!0,value:function(e){if(!e||e.match(/\s/))throw"field slug cant be "+e;return this._field=e,this}}),Object.defineProperty(e.prototype,"increment",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=this;if(!this._field)throw"field must be set to use the increment method";if(isNaN(parseFloat(e)))throw"Increment value must be a number";var n=this.nestedCollectionsIDs.join(".");return new Promise((function(r,i){var o="".concat(f,"/collection/").concat(t.collectionID,"/items/").concat(t._item,"/field/").concat(t._field,"?increment=").concat(e);n&&(o+="&nestedID=".concat(n)),t.instance.axiosInstance.put(o).then((function(e){r(e)})).catch((function(e){i(e)}))}))}}),Object.defineProperty(e.prototype,"decrement",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=this;if(!this._field)throw"field must be set to use the decrement method";if("string"==typeof e&&(e=parseFloat(e)),isNaN(e))throw"Increment value must be a number";e>0&&(e*=-1);var n=this.nestedCollectionsIDs.join(".");return new Promise((function(r,i){var o="".concat(f,"/collection/").concat(t.collectionID,"/items/").concat(t._item,"/field/").concat(t._field,"?increment=").concat(e);n&&(o+="&nestedID=".concat(n)),t.instance.axiosInstance.put(o).then((function(e){r(e)})).catch((function(e){i(e)}))}))}}),Object.defineProperty(e.prototype,"unset",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){var n=this,r=this.nestedCollectionsIDs.join(".");if(r)throw"Unset is not yet supported in nested collections";return new Promise((function(i,o){var a="".concat(f,"/collection/").concat(n.collectionID,"/items/").concat(n._item,"/field/").concat(e);r&&(a+="?nestedID=".concat(r)),n.instance.axiosInstance.delete(a,{data:{value:t}}).then((function(e){i(e)})).catch((function(e){o(e)}))}))}}),Object.defineProperty(e.prototype,"value",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){var n=this,r=this.nestedCollectionsIDs.join(".");return new Promise((function(i,o){var a="".concat(f,"/collection/").concat(n.collectionID,"/items/").concat(n._item,"/field/").concat(e);r&&(a+="?nestedID=".concat(r)),n.instance.axiosInstance.delete(a,{data:{value:t}}).then((function(e){i(e)})).catch((function(e){o(e)}))}))}}),Object.defineProperty(e.prototype,"get",{enumerable:!1,configurable:!0,writable:!0,value:function(){var e=this;return new Promise((function(t,n){var r=new URLSearchParams,i=e.nestedCollectionsIDs.join(".");e._pageNumber&&r.append("pageNumber",String(e._pageNumber)),e.sortField&&r.append("sort",e.sortField),e.sortOrder&&r.append("order",e.sortOrder),e.itemsPerPage&&r.append("perPage",String(e.itemsPerPage)),e.callEverything&&r.append("everything",String(e.callEverything)),""!=e._projectOff&&r.append("projectOff",e._projectOff),""!=e._projectOn&&r.append("projectOn",e._projectOn);var o=e._item?"/"+e._item:"",a="".concat(f,"/collection/").concat(e.collectionID,"/items").concat(o,"?").concat(r.toString());e._query.length>0&&(a=a+"&query="+e._query.join("%2B")),i&&(a+="&nestedID=".concat(i)),e.instance.axiosInstance.get(a).then((function(e){e.status>=200&&e.status<400?t(e):n(e)})).catch((function(e){n(e)}))}))}}),Object.defineProperty(e.prototype,"users",{enumerable:!1,configurable:!0,writable:!0,value:function(){var e=this;if(!this._item)throw new Error("Users can only be retrieved in relation to an item");var t=this.nestedCollectionsIDs.join(".");return new Promise((function(n,r){var i="".concat(f,"/collection/").concat(e.collectionID,"/items/").concat(e._item,"/bagelUsers");t&&(i+="?nestedID=".concat(t)),e.instance.axiosInstance.get(i).then((function(e){n(e)})).catch((function(e){r(e)}))}))}}),Object.defineProperty(e.prototype,"addUser",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=this;if(!this._item)throw new Error("Users can only be added in relation to an item");var n=this.nestedCollectionsIDs.join(".");return new Promise((function(r,i){var o="".concat(f,"/collection/").concat(t.collectionID,"/items/").concat(t._item,"/bagelUsers");n&&(o+="?nestedID=".concat(n)),t.instance.axiosInstance.put(o,{userID:e}).then((function(e){r(e)})).catch((function(e){i(e)}))}))}}),Object.defineProperty(e.prototype,"removeUser",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=this;if(!this._item)throw new Error("Users can only be removed in relation to an item");var n=this.nestedCollectionsIDs.join(".");return new Promise((function(r,i){var o="".concat(f,"/collection/").concat(t.collectionID,"/items/").concat(t._item,"/bagelUsers");n&&(o+="?nestedID=".concat(n)),t.instance.axiosInstance.delete(o,{data:{userID:e}}).then((function(e){r(e)})).catch((function(e){i(e)}))}))}}),Object.defineProperty(e.prototype,"listen",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){return(0,o.__awaiter)(this,void 0,void 0,(function(){var n,r,i,a,c,s=this;return(0,o.__generator)(this,(function(u){switch(u.label){case 0:if(!e)throw new Error("onMessage callback must be defined");return[4,this.instance.users()._bagelUserActive()];case 1:return u.sent()?[4,this.instance.users()._getAccessToken()]:[3,3];case 2:return n=u.sent(),[3,4];case 3:n=this.apiToken,u.label=4;case 4:return r=this.nestedCollectionsIDs.join("."),i=b+"/collection/".concat(this.collectionID,"/live?authorization=").concat(n,"&nestedID=").concat(r,"&itemID=").concat(this._item),this.client=new EventSource(i),a=this,c=function(e){return(0,o.__awaiter)(s,void 0,void 0,(function(){var i;return(0,o.__generator)(this,(function(o){switch(o.label){case 0:return a.client.readyState!==EventSource.CLOSED?[3,4]:[4,a.instance.users()._bagelUserActive()];case 1:return o.sent()?[4,a.instance.users().refresh()]:[3,4];case 2:return o.sent(),[4,a.instance.users()._getAccessToken()];case 3:return n=o.sent(),i=b+"/collection/".concat(a.collectionID,"/live?authorization=").concat(n,"&requestID=").concat(a.requestID,"&nestedID=").concat(r,"&itemID=").concat(a._item),a.client=new EventSource(i),[2];case 4:return t&&t(e),[2]}}))}))},this.client.addEventListener("start",(function(e){a.requestID=e.data})),this.client.addEventListener("stop",(function(){return(0,o.__awaiter)(s,void 0,void 0,(function(){var t;return(0,o.__generator)(this,(function(i){switch(i.label){case 0:return[4,a.instance.users()._bagelUserActive()];case 1:return i.sent()?[4,a.instance.users()._getAccessToken()]:[3,3];case 2:return n=i.sent(),[3,4];case 3:n=a.apiToken,i.label=4;case 4:return a.client.close(),t=b+"/collection/".concat(a.collectionID,"/live?authorization=").concat(n,"&requestID=").concat(a.requestID,"&nestedID=").concat(r,"&itemID=").concat(a._item),a.client=new EventSource(t),a.client.onmessage=e,a.client.onerror=c,[2]}}))}))})),this.client.onmessage=e,this.client.onerror=c,[2,this.client]}}))}))}}),e}(),c=function(e){function t(t){var n=t.instance,r=t.collectionID;return e.call(this,{instance:n,collectionID:r})||this}return(0,o.__extends)(t,e),Object.defineProperty(t.prototype,"get",{enumerable:!1,configurable:!0,writable:!0,value:function(){var e=this;return new Promise((function(t,n){var r="".concat(f,"/collection/").concat(e.collectionID,"/schema");e.instance.axiosInstance.get(r).then((function(e){e.status>=200&&e.status<400?t(e):n(e)})).catch((function(e){n(e)}))}))}}),t}(a),s=require("lodash-es");var u="https://auth.bageldb.com/api/public";(null===globalThis||void 0===globalThis?void 0:globalThis.localStorage)||(globalThis.localStorage=new function(e){Object.defineProperty(this,"key",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"setItem",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"getItem",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"removeItem",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"clear",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"length",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"__protected",{enumerable:!0,configurable:!0,writable:!0,value:void 0});var t=this;e||(e={});var n=(0,s.keys)(e),r=function(e){return(0,s.isUndefined)(e)?null:e};this.key=function(e){var t=n[e];return r(t)},this.setItem=function(r,i){(0,s.includes)(n,r)||n.push(r),e[r]=i,t.length=(0,s.size)(e)},this.getItem=function(t){var n=e[t];return r(n)},this.removeItem=function(r){delete e[r],n=(0,s.without)(n,r),t.length=(0,s.size)(e)},this.clear=function(){var t=(0,s.keys)(e),n=this.removeItem;t.forEach((function(e){n(e)}))},this.length=(0,s.size)(e),this.__protected=function(){return{data:e}}}({}));const l=function(){function e(e){var t,n=e.instance;Object.defineProperty(this,"instance",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"axios",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"bagelStorage",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.instance=n,this.axios=this.instance.axiosInstance,this.bagelStorage=(null===(t=this.instance)||void 0===t?void 0:t.customStorage)||(null===globalThis||void 0===globalThis?void 0:globalThis.localStorage)}return Object.defineProperty(e.prototype,"_isBrowser",{enumerable:!1,configurable:!0,writable:!0,value:function(){return!new Function("try {return this===global;}catch(e){return false;}")()}}),Object.defineProperty(e.prototype,"_bagelUserActive",{enumerable:!1,configurable:!0,writable:!0,value:function(){return(0,o.__awaiter)(this,void 0,void 0,(function(){var e,t;return(0,o.__generator)(this,(function(n){switch(n.label){case 0:return e=this._isBrowser(),[4,this.getBagelUserID()];case 1:return t=n.sent(),[2,e&&null!==t&&t.length>0]}}))}))}}),Object.defineProperty(e.prototype,"create",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){var n=this;return e=e.toLowerCase().trim(),new Promise((function(r,i){var o="".concat(u,"/user"),a={email:e,password:t};n.axios.post(o,a).then((function(e){if(201==e.status){var t=e.data;if(n.instance.isServer)return void r(t.user_id);n._storeTokens(t),n._storeBagelUser(t.user_id),r(t.user_id)}else i(e)})).catch((function(e){i(e)}))}))}}),Object.defineProperty(e.prototype,"validateOtp",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return(0,o.__awaiter)(this,void 0,void 0,(function(){var t,n,r,i;return(0,o.__generator)(this,(function(o){switch(o.label){case 0:return[4,this._getOtpRequestNonce()];case 1:t=o.sent(),n="".concat(u,"/user/otp/verify/").concat(t),r={otp:e},o.label=2;case 2:return o.trys.push([2,4,,5]),[4,this.axios.post(n,r)];case 3:return i=o.sent(),this._storeTokens(i.data),[2,i.data.user_id];case 4:throw o.sent(),"wrong authorization code";case 5:return[2]}}))}))}}),Object.defineProperty(e.prototype,"_getOtpRequestNonce",{enumerable:!1,configurable:!0,writable:!0,value:function(){return(0,o.__awaiter)(this,void 0,void 0,(function(){var e,t,n;return(0,o.__generator)(this,(function(r){switch(r.label){case 0:return[4,this.bagelStorage.getItem("bagel-nonce")];case 1:return e=r.sent(),[4,this.bagelStorage.getItem("bagel-expires")];case 2:if(t=+(r.sent()||""),e&&t){if(n=new Date,t<=n.setSeconds(n.getSeconds()))throw"OTP request has expired, try again";return[2,e]}throw"Request an OTP first"}}))}))}}),Object.defineProperty(e.prototype,"requestOtp",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return(0,o.__awaiter)(this,void 0,void 0,(function(){var t,n,r;return(0,o.__generator)(this,(function(i){switch(i.label){case 0:e=e.toLowerCase().trim(),t="".concat(u,"/user/otp"),n={emailOrPhone:e},i.label=1;case 1:return i.trys.push([1,4,,5]),[4,this.axios.post(t,n)];case 2:return r=i.sent(),[4,this._storeOtpRequestNonce(r.data)];case 3:return i.sent(),[2,r.data.nonce];case 4:return[2,i.sent()];case 5:return[2]}}))}))}}),Object.defineProperty(e.prototype,"_storeOtpRequestNonce",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=e.nonce,n=e.expires_in;return(0,o.__awaiter)(this,void 0,void 0,(function(){var e,r;return(0,o.__generator)(this,(function(i){switch(i.label){case 0:return e=new Date,r="".concat(e.setSeconds(e.getSeconds()+n)),[4,this.bagelStorage.setItem("bagel-nonce",t)];case 1:return i.sent(),[4,this.bagelStorage.setItem("bagel-expires",r)];case 2:return i.sent(),[2]}}))}))}}),Object.defineProperty(e.prototype,"validate",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){var n=this;return e=e.toLowerCase().trim(),new Promise((function(r,i){var o="".concat(u,"/user/verify"),a={email:e,password:t};n.axios.post(o,a).then((function(e){if(200==e.status){var t=e.data;n._storeTokens(t),n._storeBagelUser(t.user_id),r(t.user_id)}else i(e)})).catch((function(e){i(e)}))}))}}),Object.defineProperty(e.prototype,"getUser",{enumerable:!1,configurable:!0,writable:!0,value:function(){var e=this;return new Promise((function(t,n){if(e._bagelUserActive()){var r="".concat(u,"/user");e.axios.get(r).then((function(e){200==e.status?t(e):n(e)})).catch((function(e){n(e)}))}else n(new Error("a Bagel User must be logged in to get Bagel User info"+e._bagelUserActive()))}))}}),Object.defineProperty(e.prototype,"requestPasswordReset",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=this;return e=e.toLowerCase().trim(),new Promise((function(n,r){var i="".concat(u,"/user/resetpassword"),o={email:e};t.axios.post(i,o).then((function(e){200==e.status?n(e):r(e)})).catch((function(e){r(e)}))}))}}),Object.defineProperty(e.prototype,"updatePassword",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){var n=this;return e=e.toLowerCase().trim(),new Promise((function(r,i){if(n._isBrowser())i(new Error("Update Password feature is only available when using NodeJS"));else{var o="".concat(u,"/user/updatePassword"),a={email:e,password:t};n.axios.post(o,a).then((function(e){200==e.status?r(e):i(e)})).catch((function(e){i(e)}))}}))}}),Object.defineProperty(e.prototype,"_storeBagelUser",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return(0,o.__awaiter)(this,void 0,void 0,(function(){return(0,o.__generator)(this,(function(t){switch(t.label){case 0:return[4,this.bagelStorage.setItem("bagel-user",e)];case 1:return t.sent(),[2]}}))}))}}),Object.defineProperty(e.prototype,"_storeTokens",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return(0,o.__awaiter)(this,void 0,void 0,(function(){var t;return(0,o.__generator)(this,(function(n){switch(n.label){case 0:return[4,this.bagelStorage.setItem("bagel-access",e.access_token)];case 1:return n.sent(),(t=new Date).setSeconds(t.getSeconds()+e.expires_in),[4,this.bagelStorage.setItem("bagel-expires",t)];case 2:return n.sent(),[4,this.bagelStorage.setItem("bagel-refresh",e.refresh_token)];case 3:return n.sent(),[2]}}))}))}}),Object.defineProperty(e.prototype,"getBagelUserID",{enumerable:!1,configurable:!0,writable:!0,value:function(){return(0,o.__awaiter)(this,void 0,void 0,(function(){return(0,o.__generator)(this,(function(e){switch(e.label){case 0:return[4,this.bagelStorage.getItem("bagel-user")];case 1:return[2,e.sent()]}}))}))}}),Object.defineProperty(e.prototype,"_getRefreshToken",{enumerable:!1,configurable:!0,writable:!0,value:function(){return(0,o.__awaiter)(this,void 0,void 0,(function(){return(0,o.__generator)(this,(function(e){switch(e.label){case 0:return[4,this.bagelStorage.getItem("bagel-refresh")];case 1:return[2,e.sent()]}}))}))}}),Object.defineProperty(e.prototype,"_getAccessToken",{enumerable:!1,configurable:!0,writable:!0,value:function(){return(0,o.__awaiter)(this,void 0,void 0,(function(){var e;return(0,o.__generator)(this,(function(t){switch(t.label){case 0:return[4,this.bagelStorage.getItem("bagel-expires")];case 1:return e=t.sent()||"",new Date(e)<=new Date?[2,this.refresh()]:[3,2];case 2:return[4,this.bagelStorage.getItem("bagel-access")];case 3:return[2,t.sent()]}}))}))}}),Object.defineProperty(e.prototype,"logout",{enumerable:!1,configurable:!0,writable:!0,value:function(){return(0,o.__awaiter)(this,void 0,void 0,(function(){return(0,o.__generator)(this,(function(e){switch(e.label){case 0:return[4,this.bagelStorage.removeItem("bagel-user")];case 1:return e.sent(),[4,this.bagelStorage.removeItem("bagel-access")];case 2:return e.sent(),[4,this.bagelStorage.removeItem("bagel-refresh")];case 3:return e.sent(),[2]}}))}))}}),Object.defineProperty(e.prototype,"refresh",{enumerable:!1,configurable:!0,writable:!0,value:function(){var e=this;return new Promise((function(t,n){if(e._getRefreshToken()){var r="".concat(u,"/user/token"),i="grant_type=refresh_token&refresh_token=".concat(e._getRefreshToken(),"&client_id=project-client");e.axios.post(r,i).then((function(r){if(200===r.status){var i=r.data;e._storeTokens(i),t(i.access_token)}else n(r)})).catch((function(e){n(e)}))}else n(new Error("No Bagel User is logged in"))}))}}),e}();var f="https://api.bagelstudio.co/api/public",b="https://live.bageldb.com/api/public"},941:e=>{e.exports=require("form-data")},752:e=>{e.exports=require("tslib")}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};(()=>{n.d(r,{default:()=>i});var e=n(752),t=n(454);const i=function(){function n(n,r){void 0===r&&(r={isServer:!1,customStorage:void 0});var i=this;Object.defineProperty(this,"isServer",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"customStorage",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"apiToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"axiosInstance",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.isServer=!!r.isServer,this.customStorage=r.customStorage,this.apiToken=n,this.axiosInstance=t.od.create(),this.axiosInstance.interceptors.request.use((function(r){return(0,e.__awaiter)(i,void 0,void 0,(function(){var i,o;return(0,e.__generator)(this,(function(e){switch(e.label){case 0:return r.headers["Accept-Version"]="v1",[4,new t.NR({instance:this})._bagelUserActive()];case 1:return e.sent()&&!(null===(o=r.url)||void 0===o?void 0:o.includes("user/token"))?(i=new t.NR({instance:this})._getAccessToken(),r.headers.Authorization="Bearer "+i):r.headers.Authorization="Bearer "+n,[2,r]}}))}))}),(function(e){return Promise.reject(e)})),this.axiosInstance.interceptors.response.use((function(e){return e}),(function(n){return(0,e.__awaiter)(i,void 0,void 0,(function(){var r=this;return(0,e.__generator)(this,(function(e){switch(e.label){case 0:return[4,new t.NR({instance:this})._bagelUserActive()];case 1:return e.sent()&&n.response&&401==n.response.status&&!n.config.url.includes("user/token")?[2,new t.NR({instance:this}).refresh().then((function(){var e=n.config;return e.headers.Authorization="Bearer ".concat(new t.NR({instance:r})._getAccessToken()),new Promise((function(n,r){t.od.request(e).then((function(e){n(e)})).catch((function(e){r(e)}))}))})).catch((function(){return Promise.reject(n)}))]:[2,Promise.reject(n)]}}))}))}))}return Object.defineProperty(n.prototype,"schema",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return new t.ej({instance:this,collectionID:e})}}),Object.defineProperty(n.prototype,"collection",{enumerable:!1,configurable:!0,writable:!0,value:function(e){return new t.CH({instance:this,collectionID:e})}}),Object.defineProperty(n.prototype,"users",{enumerable:!1,configurable:!0,writable:!0,value:function(){return new t.NR({instance:this})}}),Object.defineProperty(n,"ASC",{get:function(){return"ASC"},enumerable:!1,configurable:!0}),Object.defineProperty(n,"DESC",{get:function(){return"DESC"},enumerable:!1,configurable:!0}),Object.defineProperty(n,"EQUAL",{get:function(){return"="},enumerable:!1,configurable:!0}),Object.defineProperty(n,"NOT_EQUAL",{get:function(){return"!="},enumerable:!1,configurable:!0}),Object.defineProperty(n,"GREATER_THAN",{get:function(){return">"},enumerable:!1,configurable:!0}),Object.defineProperty(n,"LESS_THAN",{get:function(){return"<"},enumerable:!1,configurable:!0}),Object.defineProperty(n,"WITHIN",{get:function(){return"within"},enumerable:!1,configurable:!0}),Object.defineProperty(n,"GeoPointQuery",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t,n){return"".concat(e,",").concat(t,",").concat(n)}}),n}()})(),exports.default=r.default.default,Object.defineProperty(exports,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,